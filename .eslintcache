[{"/Users/jan/priv/checklist-react/src/components/ResetPassword.tsx":"1","/Users/jan/priv/checklist-react/src/overmind/index.ts":"2","/Users/jan/priv/checklist-react/src/App/App.tsx":"3","/Users/jan/priv/checklist-react/src/overmind/effects.ts":"4","/Users/jan/priv/checklist-react/src/overmind/state.ts":"5","/Users/jan/priv/checklist-react/src/overmind/actions.ts":"6","/Users/jan/priv/checklist-react/src/components/AppBar.tsx":"7","/Users/jan/priv/checklist-react/src/components/Groups.tsx":"8","/Users/jan/priv/checklist-react/src/components/Privacy.tsx":"9","/Users/jan/priv/checklist-react/src/components/Register.tsx":"10","/Users/jan/priv/checklist-react/src/components/Login.tsx":"11","/Users/jan/priv/checklist-react/src/components/Question.tsx":"12","/Users/jan/priv/checklist-react/src/components/GroupItem.tsx":"13","/Users/jan/priv/checklist-react/src/utils/animations.ts":"14","/Users/jan/priv/checklist-react/src/components/Remarks.tsx":"15","/Users/jan/priv/checklist-react/src/index.js":"16","/Users/jan/priv/checklist-react/src/components/ForgotPassword.tsx":"17"},{"size":3760,"mtime":1608760244539,"results":"18","hashOfConfig":"19"},{"size":391,"mtime":1608740755720,"results":"20","hashOfConfig":"21"},{"size":3025,"mtime":1608740755712,"results":"22","hashOfConfig":"19"},{"size":3328,"mtime":1609580729127,"results":"23","hashOfConfig":"19"},{"size":1785,"mtime":1608761726919,"results":"24","hashOfConfig":"19"},{"size":3708,"mtime":1609598335561,"results":"25","hashOfConfig":"19"},{"size":2849,"mtime":1608740755713,"results":"26","hashOfConfig":"19"},{"size":1765,"mtime":1608740755715,"results":"27","hashOfConfig":"19"},{"size":5955,"mtime":1608740755716,"results":"28","hashOfConfig":"19"},{"size":3442,"mtime":1610995544623,"results":"29","hashOfConfig":"19"},{"size":2428,"mtime":1608763797348,"results":"30","hashOfConfig":"19"},{"size":4286,"mtime":1608760089326,"results":"31","hashOfConfig":"19"},{"size":5054,"mtime":1608759614403,"results":"32","hashOfConfig":"19"},{"size":5900,"mtime":1608760569438,"results":"33","hashOfConfig":"19"},{"size":1018,"mtime":1608760121726,"results":"34","hashOfConfig":"19"},{"size":1537,"mtime":1608762048977,"results":"35","hashOfConfig":"19"},{"size":3140,"mtime":1608764355148,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},"1mh6tz4",{"filePath":"41","messages":"42","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},"udm6p5",{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"40"},"/Users/jan/priv/checklist-react/src/components/ResetPassword.tsx",["87"],"import React, { useState, FormEvent, MouseEvent } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport styled from 'styled-components';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { useOvermind } from '../overmind';\n// import Register from './Register';\nimport AppBar from './AppBar';\nimport imageElement from '../assets/logo-max.png';\nimport { media } from '../utils/media';\n\nconst AppContainer = styled.div`\n    position: relative;\n    padding-bottom: 4em;\n    min-height: calc(100vh - 4em);\n`;\n\nconst Content = styled.div`\n  padding: 30px 100px;\n  & p, & ul {\n    font-size: 20px;\n    margin-top: 0;\n  }\n  & p.smaller {\n    font-size: 14px;\n    margin-top: 20px;\n  }\n  & img {\n    float: left;\n  }\n  & a {\n    color: green;\n    padding-left: 0.3em;\n    padding-right: 0.3em;\n  }\n  ${media.phone`\n    padding: 12px;\n    & h1 {\n      font-size: 1.5em;\n    }\n    & p, & ul {\n      font-size: 16px;\n    }\n    & ul {\n      padding-left: 32px;\n    }\n  `}\n`;\n\nconst Row = styled.div`\n  display: flex;\n  margin-top: 50px;\n`;\n\nconst LoginCard = styled(Card)`\n  max-width: 600px;\n  margin: 0 auto;\n`;\n\nconst Error = styled.div`\n  height: 1em;\n  font-weight: bold;\n  text-align: center;\n  color: red;\n`;\n\ninterface FPProps {\n  userId?: string,\n  token?: string,\n}\n\nconst ResetPassword: React.FC<RouteComponentProps<FPProps>> = ({ userId, token }: FPProps) => {\n  const { state, actions }: any = useOvermind();\n  // const registered = '';\n\n  const [passwords, setPasswords] = useState({\n    password: '',\n    passwordConfirmed: '',\n  });\n\n  const onChange = (e: FormEvent<HTMLInputElement>): void => {\n    const safeInputValue: string = e.currentTarget.value;\n    setPasswords({\n      ...passwords,\n      ...{ [e.currentTarget.name]: safeInputValue },\n    });\n  };\n\n  const validateAndSendData = (e: MouseEvent): void => {\n    e.preventDefault();\n    if (userId && token && passwords.password\n      && passwords.password === passwords.passwordConfirmed) {\n      actions.changePassword({\n        userId,\n        password: passwords.password,\n        token,\n      });\n    }\n  };\n\n  return (\n    <AppContainer>\n      <AppBar />\n      <Content>\n        <Row>\n        <img src={imageElement} alt=\"logo\" />\n          <h1>\n            Toegangscode wijzigen\n          </h1>\n        </Row>\n        <LoginCard>\n          <CardContent>\n            <Error>\n              {state.error.login}\n            </Error>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"password\"\n              name=\"password\"\n              label=\"Nieuw wachtwoord\"\n              type=\"password\"\n              value={passwords.password}\n              inputProps={{\n                onChange,\n              }}\n              fullWidth\n            />\n            <TextField\n              type=\"password\"\n              id=\"passwordConfirmed\"\n              name=\"passwordConfirmed\"\n              label=\"bevestig wachtwoord\"\n              value={passwords.passwordConfirmed}\n              inputProps={{\n                onChange,\n              }}\n              fullWidth\n            />\n          </CardContent>\n          <CardActions>\n            <Button\n              disabled={!(passwords.password\n                && passwords.password === passwords.passwordConfirmed)}\n              onClick={validateAndSendData}\n              color=\"primary\"\n            >\n              Verzenden\n            </Button>\n          </CardActions>\n        </LoginCard>\n      </Content>\n    </AppContainer>\n  );\n};\n\nexport default ResetPassword;\n",["88","89","90","91","92","93","94","95"],"/Users/jan/priv/checklist-react/src/overmind/index.ts",["96"],"import { IConfig } from 'overmind';\nimport { state } from './state';\nimport * as actions from './actions';\nimport * as effects from './effects';\nimport { createHook } from 'overmind-react';\n\nexport const config = {\n  state,\n  actions,\n  effects,\n};\n\ndeclare module 'overmind' {\n  interface Config extends IConfig<typeof config> {}\n};\n\nexport const useOvermind = createHook<typeof config>();\n",["97","98","99","100","101","102","103","104"],"/Users/jan/priv/checklist-react/src/App/App.tsx",["105","106"],"/**\n * The start of the application.\n * Homepage page has log in, when logged in we collect all the data:\n * groups, questions, answers, etc. After that we can show the first page\n */\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport styled from 'styled-components';\nimport Card from '@material-ui/core/Card';\nimport CircleLoader from 'react-spinners/CircleLoader';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { useOvermind } from '../overmind';\nimport imageElement from '../assets/logo-max.png';\nimport Login from '../components/Login';\nimport AppBar from '../components/AppBar';\nimport Register from '../components/Register';\nimport Privacy from '../components/Privacy';\nimport { media } from '../utils/media';\n\nconst Groups = React.lazy(() => import('../components/Groups'));\n\nconst AppContainer = styled.div`\n    position: relative;\n    padding-bottom: 4em;\n    min-height: calc(100vh - 4em);\n`;\n\nconst Content = styled.div`\n  padding: 30px 100px;\n  & p, & ul {\n    font-size: 20px;\n    margin-top: 0;\n  }\n  & p.smaller {\n    font-size: 14px;\n    margin-top: 20px;\n  }\n  & img {\n    float: left;\n  }\n  & a {\n    color: green;\n    padding-left: 0.3em;\n    padding-right: 0.3em;\n  }\n  ${media.phone`\n    padding: 12px;\n    & h1 {\n      font-size: 1.5em;\n    }\n    & p, & ul {\n      font-size: 16px;\n    }\n    & ul {\n      padding-left: 32px;\n    }\n  `}\n`;\n\nconst Row = styled.div`\n  display: flex;\n  margin-top: 50px;\n`;\n\nconst Error = styled(Card)`\n  max-width: 600px;\n  height: 189px;\n  margin: 0 auto;\n  padding: 20px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  &>* {\n    flex: 1 0 auto;\n  }\n`;\nconst App: React.FC<RouteComponentProps> = () => {\n  const { state, actions }: any = useOvermind();\n\n  useEffect(() => {\n    actions.checkLogin();\n  }, []);\n\n  useEffect(() => {\n    if (Object.keys(state.error).length > 0) {\n      console.log(state.error);\n      toast(state.error.login);\n    }\n  }, [state.error]);\n\n  return (\n    <AppContainer>\n      <AppBar />\n      {state.isLoggedIn ? (\n        <React.Suspense fallback={<div />}>\n          <Groups />\n        </React.Suspense>\n      ) : (\n        <Content>\n          <Row>\n          <img src={imageElement} alt=\"logo\" />\n            <h1>\n              Welkom\n            </h1>\n          </Row>\n          <Row>\n            <Register />\n          </Row>\n          {state.hasLoaded ? (\n            <Login />\n          ) : (\n            <Error>\n              <p>\n                {\n                  (state.error && 'server' in state.error && state.error.server) || 'er wordt verbinding gemaakt met de server...'\n                }\n              </p>\n              {!('server' in state.error) && <CircleLoader color=\"#008025\" />}\n            </Error>\n          )}\n\n        </Content>\n      )}\n      <Privacy />\n      <ToastContainer />\n    </AppContainer>\n  );\n};\n\nexport default App;\n","/Users/jan/priv/checklist-react/src/overmind/effects.ts",[],"/Users/jan/priv/checklist-react/src/overmind/state.ts",["107"],"/* eslint-disable no-shadow, max-len */\nimport { derived } from 'overmind';\n\nexport type Credentials = {\n  username: string,\n  password: string,\n}\n\nexport type RegisterData = {\n  email: string,\n  name: string,\n}\n\nexport type PasswordData = {\n  userId: string,\n  password: string,\n  token: string,\n}\n\nexport type User = {\n  gebruiker_id: number,\n  naam: string,\n  laatst_ingelogd: Date,\n}\n\nexport type Answer = {\n  antwoord_id: number,\n  vraag_id: number,\n  gebruiker_id: number,\n  antwoord: string,\n  ingevoerd_op: Date,\n}\n\nexport type Remark = {\n  opmerking_id: number,\n  vraag_id: number,\n  gebruiker_id: number,\n  opmerking: string,\n  ingevoerd_op: Date,\n}\n\nexport type Tip = {\n  tip_id: number,\n  vraag_id: number,\n  gebruiker_id: number,\n  tip: string,\n  ingevoerd_op: Date,\n}\n\nexport type Question = {\n  vraag_id: number,\n  groep_id: number,\n  type: string,\n  rang: number,\n  vraag: string,\n  answers: Answer[],\n  remarks: Remark[],\n  tips: Tip[],\n  ingevoerd_op: Date,\n}\n\nexport type Group = {\n  groep_id: number,\n  naam: string,\n  navigatie_naam: string,\n  questions: Question[],\n  thema: number,\n}\n\nexport type Error = {\n  check?: string,\n  server?: string,\n  login?: string,\n}\n\nexport type State = {\n  theme: number,\n  waiting: boolean,\n  isLoggedIn: boolean,\n  passwordSent: boolean,\n  isRegistered: boolean,\n  message?: string,\n  user?: User,\n  hasLoaded: boolean,\n  isSaving?: number,\n  groups?: Group[],\n  themedGroups: Group[],\n  error: Error,\n}\n\nexport const state: State = {\n  waiting: false,\n  passwordSent: false,\n  isLoggedIn: false,\n  isRegistered: false,\n  hasLoaded: false,\n  theme: 1,\n  error: {},\n  themedGroups: derived((state: State) => {\n    return state.groups ? Object.values(state.groups).filter((item: any) => item.thema === state.theme) : [];\n  }),\n};\n","/Users/jan/priv/checklist-react/src/overmind/actions.ts",[],"/Users/jan/priv/checklist-react/src/components/AppBar.tsx",["108"],"import React, { useState, MouseEvent } from 'react';\nimport styled from 'styled-components';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport { useOvermind } from '../overmind';\nimport { media } from '../utils/media';\nimport imageElement from '../assets/logo-max.png';\n\nconst Toolbar = styled.div`\n  max-width: 1000px;\n  width: calc(100% - 5px);\n  margin: 0px auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-family: sans-serif;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  margin-top: 2px;\n  align-items: center;\n  font-variant: small-caps;\n  font-size: 25px;\n  font-family: sans-serif;\n  ${media.phone`\n    margin-left: 12px;\n    font-size: 15px;\n  `}\n`;\nconst Span = styled.span`\n  padding: 20px 0;\n`;\n\nconst Img = styled.img`\n  height: 50px;\n  background-color: #ffffff;\n  border-radius: 50%;\n  margin: 5px;\n  padding: 5px;\n  ${media.phone`\n    display: none;\n  `}\n`;\n\nconst Name = styled.span`\n  ${media.phone`\n    display: none;\n  `}\n`;\n\nconst MenuAppBar: React.FC = () => {\n  const { state, actions }: any = useOvermind();\n  const [anchorEl, setAnchorEl] = useState<any>(null);\n\n  const handleMenu = (event: MouseEvent): void => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (): void => {\n    setAnchorEl(null);\n  };\n\n  const handleLogOut = (): void => {\n    actions.logoutUser();\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Title>\n          {state.isLoggedIn && <Img src={imageElement} alt=\"logo\" />}\n          <Span>Duurzaamheid checklist van de Groene Giraf</Span>\n        </Title>\n        {state.isLoggedIn && (\n          <div>\n            <Name>\n              {state.user && 'naam' in state.user && state.user.naam}\n            </Name>\n            <IconButton\n              aria-owns={open ? 'menu-appbar' : undefined}\n              aria-haspopup=\"true\"\n              onClick={handleMenu}\n              color=\"inherit\"\n            >\n              <AccountCircle />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorEl}\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              open={open}\n              onClose={handleClose}\n            >\n              <MenuItem onClick={handleLogOut}>Uitloggen</MenuItem>\n            </Menu>\n          </div>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default MenuAppBar;\n","/Users/jan/priv/checklist-react/src/components/Groups.tsx",["109"],"import React, { useState, useEffect } from 'react';\nimport AnimateHeight from 'react-animate-height';\nimport { useOvermind } from '../overmind';\nimport { Group, Question } from '../overmind/state';\nimport GroupItem from './GroupItem';\nimport QuestionEl from './Question';\n\nconst Groups: React.FC = () => {\n  const { state } = useOvermind();\n\n  const [currentGroups, setCurrentGroups] = useState<any>(state.themedGroups);\n  const [activeItem, setActiveItem] = useState<any>();\n\n  useEffect(() => {\n    setCurrentGroups(state.themedGroups);\n  }, [state.themedGroups]);\n\n  const toggleGroups = (item: number, value: boolean) => {\n    setActiveItem(value ? undefined : item);\n  };\n\n  return currentGroups.map((group: Group) => {\n    const checkQuestions = group.questions.filter((q: Question) => q.type === 'checkbox');\n    const nmbrOfQuestions = checkQuestions.length;\n    const nmbrOfAnswers = checkQuestions.filter((cq: Question) => cq.answers.length > 0\n      && cq.answers[0].antwoord === '1').length;\n    return (\n      <AnimateHeight\n        key={`group-${group.groep_id}`}\n        duration={300}\n        animateOpacity\n        height={!activeItem || group.groep_id === activeItem ? 'auto' : 0}\n      >\n        <GroupItem\n          id={group.groep_id}\n          name={group.naam}\n          nmbrOfQuestions={nmbrOfQuestions}\n          nmbrOfAnswers={nmbrOfAnswers}\n          toggleActive={toggleGroups}\n        >\n          {/* <ExpandingList> */}\n            {group.questions.map(question => (\n              <QuestionEl\n                key={`question-${question.vraag_id}`}\n                question={question}\n              />\n            ))}\n          {/* </ExpandingList> */}\n        </GroupItem>\n      </AnimateHeight>\n    );\n  });\n};\n\nexport default Groups;\n","/Users/jan/priv/checklist-react/src/components/Privacy.tsx",["110"],"import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { media } from '../utils/media';\n\nconst Content = styled.div`\n  max-width: 1000px;\n  margin: 5px auto;\n  font-family: sans-serif;\n`;\n\nconst Toolbar = styled.div`\n  max-width: 1000px;\n  margin: 5px auto;\n  font-family: sans-serif;\n  width: calc(100% - 5px);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst A = styled.a`\n  cursor: pointer;\n  display: block;\n  text-align: right;\n  max-width: 1000px;\n  margin: 20px auto;\n  font-family: sans-serif;\n`;\nconst Footer = styled.div`\n  position: absolute;\n  width: 100%;\n  bottom:0;\n  background-color: rgba(255, 255, 255, 0.6);\n  ${media.phone`\n    width: calc(100% - 20px);\n    padding-right: 20px;\n  `}`;\n\nconst Title = styled.div`\n  display: flex;\n  margin-top: 2px;\n  align-items: center;\n  font-variant: small-caps;\n  font-size: 25px;\n  font-family: sans-serif;\n  ${media.phone`\n    font-size: 15px;\n    padding-left: 20px;\n  `}\n`;\n\nconst List = styled.ol`\n  margin-top: 100px;\n  padding-left: 20px;\n  margin-left: 0;\n  & li {\n    padding-top:20px;\n  }\n  ${media.phone`\n    padding-left: 40px;\n    padding-right: 40px;\n  `}\n`;\nconst Foot = styled.div`\n  padding: 20px 0px 20px 20px;\n  & a {\n    margin-left: 0.5em;\n  }\n`;\n\nconst Privacy: React.FC = () => {\n  const [openPrivacy, setOpenPrivacy] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpenPrivacy(true);\n  };\n\n  const handleClose = () => {\n    setOpenPrivacy(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Footer>\n        <A onClick={handleClickOpen}>\n          Privacyverklaring\n        </A>\n      </Footer>\n      <Dialog\n        fullScreen\n        open={openPrivacy}\n        onClose={handleClose}\n        aria-labelledby=\"register\"\n      >\n        <AppBar>\n          <Toolbar>\n            <Title id=\"register\">Privacy statement en cookie beleid van de Groene Giraf</Title>\n            <IconButton color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Content>\n          <List>\n            <li>\n              <strong>Waarborgen Privacy</strong>\n              <br />\n              Het waarborgen van de privacy van bezoekers van deGroeneGiraf.nl en de online\n              Duurzaamheid checklist van de Groene Giraf is een belangrijke taak voor ons.\n              Daarom beschrijven we in onze privacy policy welke informatie we verzamelen en\n              hoe we deze informatie gebruiken.\n            </li>\n            <li>\n              <strong>Toestemming</strong>\n              <br />\n              Door de informatie en de diensten op deGroeneGiraf.nl en de online Duurzaamheid\n              checklist van de Groene Giraf te gebruiken, gaat u akkoord met onze privacy policy\n              en de voorwaarden die wij hierin hebben opgenomen. De verkregen informatie wordt\n              niet met derden gedeeld en wordt alleen geanonimiseerd gebruikt.\n            </li>\n            <li>\n              <strong>Vragen</strong>\n              <br />\n              Als u meer informatie wilt ontvangen, of vragen hebt over de privacy policy van\n              deGroeneGiraf.nl en de online Duurzaamheid checklist van de Groene Giraf kun u ons\n              benaderen via e-mail.\n              <br />\n              Ons e-mailadres is\n              <a href=\"mailto:info@degroenegiraf.nl\">info@degroenegiraf.nl</a>\n            </li>\n            <li>\n              <strong>Monitoren gedrag bezoeker</strong>\n              <br />\n              DeGroeneGiraf.nl en de online Duurzaamheid checklist van de Groene Giraf maken gebruik\n              van verschillende technieken om bij te houden wie de website en de online Duurzaamheid\n              checklist bezoekt en hoe deze bezoeker zich op de website gedraagt en welke pagina’s\n              worden bezocht. Dat is een gebruikelijke manier van werken voor websites omdat het\n              informatie oplevert die bijdraagt aan de kwaliteit van de gebruikerservaring. De\n              informatie die we via cookies registreren bestaat uit onder meer IP-adressen, het type\n              browser en de bezochte pagina’s.\n              Tevens monitoren we waar bezoekers de website voor het eerst bezoeken en vanaf welke\n              pagina ze vertrekken. Deze informatie houden we anoniem bij en is niet gekoppeld aan\n              andere persoonlijke informatie.\n            </li>\n            <li>\n              <strong>Gebruik van cookies</strong>\n              <br />\n              deGroeneGiraf.nl plaatst cookies bij bezoekers. Dat doen we om informatie te\n              verzamelen over de pagina’s die gebruikers op onze website en de online Duurzaamheid\n              checklist bezoeken, om bij te houden hoe vaak bezoekers terug komen en om te zien\n              welke pagina’s het goed doen op de website en de online Duurzaamheid checklist van\n              de Groene Giraf.\n              Ook houden we bij welke informatie de browser deelt.\n            </li>\n            <li>\n              <strong>Cookies uitschakelen</strong>\n              <br />\n              U kunt er voor kiezen om cookies uit te schakelen. Dat doet u door gebruik te maken\n              van de mogelijkheden van uw browser. U vindt meer informatie over deze mogelijkheden\n              op de website van de aanbieder van uw browser.\n            </li>\n          </List>\n          <Foot>\n            Deze privacy policy is gegenereerd door\n            <a href=\"https://privacypolicyvoorbeeld.nl\" target=\"_blank\" rel=\"noreferrer\">privacypolicyvoorbeeld.nl</a>\n          </Foot>\n        </Content>\n      </Dialog>\n    </React.Fragment>\n  );\n};\n\nexport default Privacy;\n","/Users/jan/priv/checklist-react/src/components/Register.tsx",["111"],"/Users/jan/priv/checklist-react/src/components/Login.tsx",["112"],"import React, {\n  useState,\n  useEffect,\n  FormEvent,\n  MouseEvent,\n} from 'react';\nimport styled from 'styled-components';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { useOvermind } from '../overmind';\nimport ForgotPassword from './ForgotPassword';\n\nconst LoginCard = styled(Card)`\n  max-width: 600px;\n  margin: 0 auto;\n`;\n\nconst Error = styled.div`\n  height: 1em;\n  font-weight: bold;\n  text-align: center;\n  color: red;\n`;\n\nconst Login: React.FC = () => {\n  const { state, actions }: any = useOvermind();\n  // const registered = '';\n\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: '',\n  });\n  const [isDisabled, setIsDisabled] = useState(!(credentials.username && credentials.password));\n  useEffect(() => {\n    setIsDisabled(!(credentials.username && credentials.password));\n  }, [credentials]);\n\n  const onChange = (e: FormEvent<HTMLInputElement>): void => {\n    const safeInputValue: string = e.currentTarget.value;\n    setCredentials({\n      ...credentials,\n      ...{ [e.currentTarget.name]: safeInputValue },\n    });\n  };\n\n  const validateAndSendData = (e: MouseEvent): void => {\n    e.preventDefault();\n    if (credentials.username && credentials.password) {\n      actions.doLogin(credentials);\n    }\n  };\n\n  return (\n    <LoginCard>\n      <CardContent>\n        <Error>\n          {state.error.login}\n        </Error>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"name\"\n          name=\"username\"\n          label=\"e-mailadres\"\n          type=\"email\"\n          value={credentials.username}\n          inputProps={{\n            onChange,\n          }}\n          fullWidth\n        />\n        <TextField\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          label=\"wachtwoord\"\n          value={credentials.password}\n          inputProps={{\n            onChange,\n          }}\n          fullWidth\n        />\n      </CardContent>\n      <CardActions>\n        <Button\n          disabled={isDisabled}\n          onClick={validateAndSendData}\n          color=\"primary\"\n        >\n          Inloggen\n        </Button>\n        <ForgotPassword />\n      </CardActions>\n    </LoginCard>\n  );\n};\n\nexport default Login;\n","/Users/jan/priv/checklist-react/src/components/Question.tsx",["113"],"import React, { useState, ChangeEvent } from 'react';\nimport styled from 'styled-components';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { TextField } from '@material-ui/core';\nimport { Icon } from 'react-icons-kit';\n/* eslint-disable camelcase */\nimport { ic_lightbulb_outline } from 'react-icons-kit/md/ic_lightbulb_outline';\nimport { ic_comment } from 'react-icons-kit/md/ic_comment';\n/* eslint-enable camelcase */\nimport AnimateHeight from 'react-animate-height';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nimport { useOvermind } from '../overmind';\nimport { Question } from '../overmind/state';\nimport { media } from '../utils/media';\nimport Remarks from './Remarks';\n\nconst Loader = styled.div`\n  position: absolute;\n  background-color: #ffffff;\n  z-index: 2;\n  display: block;\n  margin: 0 auto;\n`;\n\nconst Bar = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 6px 0;\n  height: 40px;\n  ${media.phone`\n    height: auto;\n  `}\n`;\n\nconst Check = styled(Checkbox)`\n  flex: 0 0 auto;\n  padding: 0;\n  margin-right: 12px;\n  margin-left: 2px;\n  & svg {\n    height: 1.5em;\n    width: 1.5em;\n    fill: #008025;\n  }\n`;\n\nconst QuestionBox = styled.div`\n  display: inline-flex;\n  align-items: center;\n  & span {\n    font-size: 18px;\n  }\n`;\n\nexport const QuestionInfo = styled(AnimateHeight)`\n  ${media.phone`\n    display: none;\n  `}\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  min-height: 60vh;\n`;\n\nconst Tip = styled.div`\n  margin-bottom: 5px;\n`;\n\nconst Navigator = styled.div`\n  display: flex;\n  flex: 0 0 40px;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst InfoContent = styled.div`\n  flex: 0 0 90%;\n`;\n\nconst setLastAnswer = (question: Question) => (question.answers\n  ? question.answers.map(a => a.antwoord)[0]\n  : '');\n\ninterface QuestionProps {\n  question: Question,\n  showDetail?: boolean,\n}\n\nconst QuestionEl: React.FC<QuestionProps> = ({ question, showDetail = false }: QuestionProps) => {\n  const { state, actions }: any = useOvermind();\n  const [more, setMore] = useState(setLastAnswer(question));\n\n  const lastAnswer = question.answers\n    ? question.answers.map(a => a.antwoord)[0] === '1'\n    : false;\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setMore(e.currentTarget.value);\n  };\n\n  const saveCheck = () => {\n    actions.saveAnswer({ question: question.vraag_id, answer: lastAnswer ? '' : '1' });\n  };\n\n  const saveThis = () => {\n    if (more !== setLastAnswer(question)) {\n      actions.saveAnswer({ question: question.vraag_id, answer: more });\n    }\n  };\n\n  /* eslint-disable camelcase */\n  return (\n    <React.Fragment>\n      <Bar>\n      {question.type === 'checkbox' && (\n        <QuestionBox>\n          <Loader>\n            <ScaleLoader\n              width={3}\n              height={24}\n              margin=\"2px\"\n              color=\"#008025\"\n              loading={state.isSaving === question.vraag_id}\n            />\n          </Loader>\n          <FormControlLabel\n            control={(\n              <Check\n                checked={lastAnswer}\n                onChange={() => saveCheck()}\n                value=\"1\"\n                disabled={!!state.isSaving}\n              />\n              )}\n            label={question.vraag}\n          />\n        </QuestionBox>\n      )}\n      </Bar>\n      {(question.tips || question.remarks) && (\n        <QuestionInfo\n          duration={300}\n          animateOpacity\n          height={showDetail ? 'auto' : 0}\n        >\n          <InfoContainer>\n            <Navigator>\n            <Icon size=\"20\" icon={ic_lightbulb_outline} />\n            <Icon size=\"16\" icon={ic_comment} />\n            </Navigator>\n            <InfoContent>\n              {question.tips.map(tip => <Tip key={`tip-${tip.tip_id}`} dangerouslySetInnerHTML={{ __html: tip.tip }} />)}\n              <Remarks remarks={question.remarks} />\n            </InfoContent>\n          </InfoContainer>\n        </QuestionInfo>\n      )}\n      {question.type !== 'checkbox' && (\n        <TextField rows=\"4\" multiline fullWidth value={more} onChange={onChange} onBlur={saveThis} variant=\"outlined\" />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default QuestionEl;\n","/Users/jan/priv/checklist-react/src/components/GroupItem.tsx",["114"],"/* eslint-disable no-mixed-operators, space-infix-ops */\nimport React, { ReactNode, useState } from 'react';\nimport styled from 'styled-components';\nimport { Progress } from 'react-sweet-progress';\nimport AnimateHeight from 'react-animate-height';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport { media } from '../utils/media';\nimport { findColors } from '../utils/animations';\n\nexport const Group = styled.div`\n  box-shadow: 1px 2px 5px #8bc34a;\n  border-radius: 8px;\n  padding: 12px 12px 6px 12px;\n  max-width: 1000px;\n  margin: 10px auto;\n  background-color: #f0f7e6;\n  font-family: sans-serif;\n\n  .react-sweet-progress {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n  }\n\n  .react-sweet-progress-symbol {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    width: 35px;\n    height: 20px;\n    padding-left: 10px;\n    color: rgba(0, 0, 0, 0.7);\n    font-weight: 800;\n  }\n\n  .react-sweet-progress-symbol-absolute {\n    display: flex;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    align-items: center;\n    justify-content: center;\n    transform: translate3d(-50%, -50%, 0);\n  }\n  .react-sweet-progress-symbol-absolute .react-sweet-progress-symbol {\n    padding: 0;\n    width: 100%;\n  }\n\n  .react-sweet-progress-circle-outer {\n    position: relative;\n    display: inline-block;\n    vertical-align: middle;\n  }\n  .react-sweet-progress-line {\n    width: 100%;\n    border-radius: 100px;\n    background-color: #efefef;\n    vertical-align: middle;\n  }\n  .react-sweet-progress-line-inner {\n    position: relative;\n    min-height: 10px;\n    border-radius: 100px;\n    transition: width 0.3s ease;\n  }\n  .react-sweet-progress-line-inner-status-active:before {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    border-radius: 10px;\n    background: #fff;\n    animation: active-anim 2s cubic-bezier(0.25, 1, 0.6, 1) infinite;\n    content: \"\";\n    opacity: 0;\n  }\n\n  @keyframes active-anim {\n    0% {\n      width: 0;\n      opacity: .1;\n    }\n    20% {\n      width: 0;\n      opacity: .5;\n    }\n    to {\n      width: 100%;\n      opacity: 0;\n    }\n  }\n  .react-sweet-progress-circle path {\n    stroke-linecap: round;\n  }\n\n  ${media.phone`\n    border-radius: 0px;\n  `}\n`;\n\nexport const GroupBar = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items:flex-start;\n  align-content: center;\n  cursor: pointer;\n`;\ninterface MyProps {\n  toggled: boolean,\n}\n\nexport const Toggle = styled.div<MyProps>`\n  transition: all 0.4s ease;\n  transform: rotateZ(${({ toggled }) => (toggled ? '-' : '')}90deg);\n`;\n\nexport const Div = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-content: flex-start;\n`;\n\nexport const QuestionContainer = styled(AnimateHeight)`\n  max-width: 1000px;\n  background-color: #fdfdfd;\n  text-align: left;\n  margin: 6px auto;\n`;\n\nexport const Name = styled.span`\n  font-weight: bold;\n  font-size: 18px;\n  margin: 0 0.5em;\n`;\n\nexport const Nmbr = styled.span`\n  color: #222;\n`;\n\nconst progressTheme = () => {\n  const colors = [\n    ...findColors('#ff0000', '#EE9A00', 50),\n    ...findColors('#EE9A00', '#008025', 50),\n  ];\n  return colors.map((color, idx) => ({ [`percent${idx}`]: { color } }))\n    .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n};\ninterface Prop {\n  id: number,\n  name: string,\n  nmbrOfQuestions: number,\n  nmbrOfAnswers: number,\n  toggleActive: (item: number, value: boolean) => void,\n  children?: ReactNode,\n}\n\nconst GroupItem: React.FC<Prop> = ({\n  id, name, toggleActive, nmbrOfQuestions, nmbrOfAnswers, children,\n}: Prop) => {\n  const [questionsToggled, setQuestionsToggled] = useState(true);\n  const percent = Math.round((nmbrOfAnswers / nmbrOfQuestions) * 100);\n\n  const toggleQuestions = () => {\n    setQuestionsToggled(!questionsToggled);\n    toggleActive(id, !questionsToggled);\n  };\n\n  const colorSwitch = () => {\n    if (percent === 0) return 'error';\n    if (percent === 100) return 'success';\n    return `percent${percent}`;\n  };\n\n  return (\n    <Group>\n      <GroupBar onClick={toggleQuestions}>\n        <Div>\n          <Progress\n            type=\"circle\"\n            width={50}\n            strokeWidth={10}\n            theme={\n              {\n                ...progressTheme(),\n                success: {\n                  color: '#008025',\n                },\n                error: {\n                  color: '#ff0000',\n                },\n              }\n            }\n            status={colorSwitch()}\n            percent={percent}\n          />\n          <Name>{name}</Name>\n          <Nmbr>{`(${nmbrOfQuestions})`}</Nmbr>\n        </Div>\n        <Toggle toggled={questionsToggled}>\n          <ChevronLeft style={{ width: '40px', height: '40px' }} />\n        </Toggle>\n      </GroupBar>\n      <QuestionContainer\n        duration={300}\n        animateOpacity\n        height={questionsToggled ? 0 : 'auto'}\n      >\n        {children}\n      </QuestionContainer>\n    </Group>\n  );\n};\n\nexport default GroupItem;\n","/Users/jan/priv/checklist-react/src/utils/animations.ts",["115"],"import { keyframes } from 'styled-components';\n\nexport const teaserFadeInOut = keyframes`\n  0% {\n    opacity: 0;\n    transform: translateY(14px);\n  }\n  30% {\n    opacity: 1;\n    transform: translateY(7px);\n  }\n  50% {\n    opacity: 1;\n    transform: translateY(7px);\n  }\n  70% {\n    opacity: 1;\n    transform: translateY(7px);\n  }\n  100% {\n    opacity: 0;\n    transform: translateY(0px);\n  }\n`;\n\nexport const notificationSlideIn = keyframes`\n  0% {\n    transform: translateX(-285px);\n  }\n  40% {\n    transform: translateX(0px);\n  }\n  100% {\n    transform: translateX(0px);\n  }\n`;\n\nexport const flashFadeIn = keyframes`\n  0% {\n    opacity: 0;\n    transform: scale(1);\n  }\n  85% {\n    opacity: 1;\n    transform: scale(1);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\n\nexport const bounce = keyframes`\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-7px);\n  }\n  60% {\n    transform: translateY(-5px);\n  }\n`;\n/**\n * scrollTargetY: the target scrollY property of the window\n * speed: time in pixels per second\n * easing: easing equation to use\n */\nenum EasingProp {\n  EaseOutSine = 'EaseOutSine',\n  EaseInOutSine = 'EaseInOutSine',\n  EaseInOutQuint = 'EaseInOutQuint',\n}\ninterface ColorType {\n  dataType: number | null,\n  value: string,\n}\nexport const scrollToY = (scrollTargetY = 0, speed = 2000, easing = EasingProp.EaseOutSine) => {\n  let currentTime = 0;\n  const time = Math.max(0.1, Math.min(Math.abs(window.scrollY - scrollTargetY) / speed, 0.8));\n\n  // easing equations from https://github.com/danro/easing-js/blob/master/easing.js\n  // const PI_D2 = Math.PI / 2;\n  interface EasingEq {\n    EaseOutSine: (p: number) => number,\n    EaseInOutSine: (p: number) => number,\n    EaseInOutQuint: (p: number) => number,\n  }\n  const easingEquations: EasingEq = {\n    EaseOutSine: pos => Math.sin(pos * (Math.PI / 2)),\n    EaseInOutSine: pos => (-0.5 * (Math.cos(Math.PI * pos) - 1)),\n    EaseInOutQuint: pos => (\n      (pos / 0.5) < 1 ? 0.5 * ((pos / 0.5) ** 5) : 0.5 * ((((pos / 0.5) - 2) ** 5) + 2)),\n  };\n\n  // add animation loop\n  const tick = () => {\n    currentTime += 1 / 60;\n    const p = currentTime / time;\n    const t = easingEquations[easing](p);\n    if (p < 1) {\n      window.requestAnimationFrame(tick);\n      window.scrollTo(0, window.scrollY + ((scrollTargetY - window.scrollY) * t));\n    } else {\n      window.scrollTo(0, scrollTargetY);\n    }\n  };\n  tick();\n};\n\nexport const greenLine = keyframes`\n  0% {\n    width: 0%;\n    margin-left: 50%\n  }\n  50% {\n    width: 100%;\n    margin-left: 0%\n  }\n  100% {\n    width: 0%;\n    margin-left: 50%\n  }\n`;\n\n// constants for switch/case checking representation type\nconst HEX = 1;\nconst RGB = 2;\nconst RGBA = 3;\n\n// get the string representation\n// type and set it on the element (HEX/RGB/RGBA)\nconst getColorType = (val: string) => {\n  if (val.indexOf('#') > -1) return HEX;\n  if (val.indexOf('rgb(') > -1) return RGB;\n  if (val.indexOf('rgba(') > -1) return RGBA;\n  return null;\n};\n\n// return a workable RGB int array [r,g,b] from hex representation\nconst processHEX = (val: string) => {\n  // does the hex contain extra char?\n  const hex = (val.length > 6) ? val.substr(1, val.length - 1) : val;\n  // is it a six character hex?\n  // scrape out the numerics\n  // if not six character hex,\n  // then work as if its a three character hex\n  const r = hex.length > 3 ? hex.substr(0, 2) : hex.substr(0, 1) + hex.substr(0, 1);\n  const g = hex.length > 3 ? hex.substr(2, 2) : hex.substr(1, 1) + hex.substr(1, 1);\n  const b = hex.length > 3 ? hex.substr(4, 2) : hex.substr(2, 1) + hex.substr(2, 1);\n  // return our clean values\n  return [\n    parseInt(r, 16),\n    parseInt(g, 16),\n    parseInt(b, 16),\n  ];\n};\n\n// return a workable RGB int array [r,g,b] from rgb/rgba representation\nconst processRGB = (val: string) => {\n  const rgb = val.split('(')[1].split(')')[0].split(',');\n  return [\n    parseInt(rgb[0], 10),\n    parseInt(rgb[1], 10),\n    parseInt(rgb[2], 10),\n  ];\n};\n\n// process the value irrespective of representation type\nconst processValue = (el: ColorType) => {\n  switch (el.dataType) {\n    case HEX:\n      return processHEX(el.value);\n    case RGB:\n      return processRGB(el.value);\n    case RGBA:\n      return processRGB(el.value);\n    default:\n      return null;\n  }\n};\n\nconst pad = (nn: string, width: number, zn: string = '0'): string => {\n  return nn.length >= width ? nn : new Array(width - nn.length + 1).join(zn) + nn;\n};\n\nexport const findColors = (startColor: string, endColor: string, steps: number) => {\n  // elements for obtaining vals\n  // attach start value\n  const startWith = {\n    dataType: getColorType(startColor),\n    value: startColor,\n  };\n  const endWith = {\n    dataType: getColorType(endColor),\n    value: endColor,\n  };\n  const val1RGB = processValue(startWith) || [0, 0, 0];\n  const val2RGB = processValue(endWith) || [0, 0, 0];\n\n  // the percentage representation of the step\n  const stepsPerc = 100 / (steps + 1);\n\n  // diffs between two values\n  const valClampRGB = [\n    val2RGB[0] - val1RGB[0],\n    val2RGB[1] - val1RGB[1],\n    val2RGB[2] - val1RGB[2],\n  ];\n\n\n  // build the color array out with color steps\n\n  return [...Array(steps)].map((s, i) => [\n    '#',\n    (valClampRGB[0] > 0)\n      ? pad((Math.round(valClampRGB[0] / 100 * (stepsPerc * (i + 1)))).toString(16), 2)\n      : pad((Math.round((val1RGB[0] + (valClampRGB[0])\n        / 100 * (stepsPerc * (i + 1))))).toString(16), 2),\n    (valClampRGB[1] > 0)\n      ? pad((Math.round(valClampRGB[1] / 100 * (stepsPerc * (i + 1)))).toString(16), 2)\n      : pad((Math.round((val1RGB[1] + (valClampRGB[1])\n        / 100 * (stepsPerc * (i + 1))))).toString(16), 2),\n    (valClampRGB[2] > 0)\n      ? pad((Math.round(valClampRGB[2] / 100 * (stepsPerc * (i + 1)))).toString(16), 2)\n      : pad((Math.round((val1RGB[2] + (valClampRGB[2])\n        / 100 * (stepsPerc * (i + 1))))).toString(16), 2),\n  ].join(''));\n};\n","/Users/jan/priv/checklist-react/src/components/Remarks.tsx",["116"],"import React from 'react';\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\nimport { Remark } from '../overmind/state';\n\nconst Item = styled.div`\n  display: flex;\n  margin-bottom: 5px;\n`;\nconst Label = styled.div`\n  width: 100px;\n`;\n\nconst convertDate = (d?: Date | null) => {\n  const date = d ? new Date(d) : new Date();\n  return (\n    [\n      `00${date.getDate()}`.slice(-2),\n      `00${date.getMonth() + 1}`.slice(-2),\n      date.getFullYear(),\n    ].join('-'));\n};\n\ninterface RemarkProps {\n  remarks: Remark[],\n}\n\nconst Remarks: React.FC<RemarkProps> = ({ remarks }: RemarkProps) => (\n  <React.Fragment>\n    {remarks.map(remark => (\n      <Item key={`remark-${remark.opmerking_id}`}>\n        <Label>{convertDate(remark.ingevoerd_op)}</Label>\n        {remark.opmerking}\n      </Item>\n    ))}\n    <Item>\n      <Label>{convertDate()}</Label>\n      <TextField rows=\"4\" multiline fullWidth value=\"\" variant=\"outlined\" />\n    </Item>\n  </React.Fragment>\n);\n\nexport default Remarks;\n",["117","118","119","120","121","122","123","124"],"/Users/jan/priv/checklist-react/src/index.js",[],"/Users/jan/priv/checklist-react/src/components/ForgotPassword.tsx",["125"],"/* eslint-disable no-unused-vars, react/jsx-curly-brace-presence */\nimport React, { useState, FormEvent, MouseEvent } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport styled from 'styled-components';\nimport { useOvermind } from '../overmind';\n\nconst But = styled.span`\n  cursor: pointer;\n  color: green;\n  text-decoration: underline;\n`;\n\nconst ForgotPassword: React.FC = () => {\n  const { state, actions }: any = useOvermind();\n  const [openForgotPassword, setOpenForgotPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [forgotData, setForgotData] = useState('');\n\n  const onChange = (e: FormEvent<HTMLInputElement>): void => {\n    const safeInputValue: string = e.currentTarget.value;\n    e.persist();\n    setForgotData(safeInputValue);\n  };\n\n  const handleClickOpen = () => {\n    setOpenForgotPassword(true);\n  };\n\n  const handleClose = () => {\n    actions.releaseSendPwd();\n    setOpenForgotPassword(false);\n  };\n\n  const validateAndSendData = (e: MouseEvent): void => {\n    e.preventDefault();\n    if (forgotData) {\n      actions.doSendPwd(forgotData);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <But\n        onClick={handleClickOpen}\n      >\n        (wachtwoord vergeten)\n      </But>\n      <Dialog\n        fullWidth\n        maxWidth={'md'}\n        open={openForgotPassword}\n        onClose={handleClose}\n        aria-labelledby=\"register\"\n      >\n        <DialogTitle id=\"register\">Wachtwoord vergeten</DialogTitle>\n        {state.passwordSent ? (\n          <React.Fragment>\n            <DialogContent>\n              {state.message}\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"primary\">\n                Sluiten\n              </Button>\n            </DialogActions>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <DialogContent>\n              <DialogContentText>{error}</DialogContentText>\n                  <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"name\"\n                    name=\"email\"\n                    label=\"E-mailadres\"\n                    type=\"email\"\n                    value={forgotData}\n                    inputProps={{\n                      onChange,\n                    }}\n                    fullWidth\n                  />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={validateAndSendData} color=\"primary\">\n                Versturen\n              </Button>\n              <Button onClick={handleClose} color=\"secondary\">\n                Annuleren\n              </Button>\n            </DialogActions>\n          </React.Fragment>\n        )}\n      </Dialog>\n    </React.Fragment>\n  );\n};\n\nexport default ForgotPassword;\n",{"ruleId":"126","severity":1,"message":"127","line":106,"column":5,"nodeType":"128","endLine":157,"endColumn":20},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":null,"fatal":true,"severity":2,"message":"145","line":14,"column":3},{"ruleId":"129","replacedBy":"146"},{"ruleId":"131","replacedBy":"147"},{"ruleId":"133","replacedBy":"148"},{"ruleId":"135","replacedBy":"149"},{"ruleId":"137","replacedBy":"150"},{"ruleId":"139","replacedBy":"151"},{"ruleId":"141","replacedBy":"152"},{"ruleId":"143","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":90,"column":7,"nodeType":"156","messageId":"157","endLine":90,"endColumn":18},{"ruleId":"126","severity":1,"message":"127","line":96,"column":5,"nodeType":"128","endLine":130,"endColumn":20},{"ruleId":"158","severity":1,"message":"159","line":99,"column":43,"nodeType":"160","messageId":"161","endLine":101,"endColumn":4,"fix":"162"},{"ruleId":"126","severity":1,"message":"127","line":75,"column":5,"nodeType":"128","endLine":113,"endColumn":14},{"ruleId":"126","severity":1,"message":"127","line":28,"column":7,"nodeType":"128","endLine":50,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":87,"column":5,"nodeType":"128","endLine":173,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":65,"column":5,"nodeType":"128","endLine":127,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":58,"column":5,"nodeType":"128","endLine":98,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":118,"column":5,"nodeType":"128","endLine":166,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":180,"column":5,"nodeType":"128","endLine":215,"endColumn":13},{"ruleId":"158","severity":1,"message":"159","line":182,"column":70,"nodeType":"160","messageId":"161","endLine":184,"endColumn":2,"fix":"163"},{"ruleId":"126","severity":1,"message":"127","line":29,"column":3,"nodeType":"128","endLine":40,"endColumn":20},{"ruleId":"129","replacedBy":"164"},{"ruleId":"131","replacedBy":"165"},{"ruleId":"133","replacedBy":"166"},{"ruleId":"135","replacedBy":"167"},{"ruleId":"137","replacedBy":"168"},{"ruleId":"139","replacedBy":"169"},{"ruleId":"141","replacedBy":"170"},{"ruleId":"143","replacedBy":"171"},{"ruleId":"126","severity":1,"message":"127","line":49,"column":5,"nodeType":"128","endLine":103,"endColumn":22},"react/jsx-filename-extension","JSX not allowed in files with extension '.tsx'","JSXElement","jsx-a11y/label-has-for",[],"jsx-a11y/accessible-emoji",[],"lines-around-directive",["172"],"no-spaced-func",["173"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"Parsing error: Only declares and type imports are allowed inside declare module\n\n  12 | \n  13 | declare module 'overmind' {\n> 14 |   interface Config extends IConfig<typeof config> {}\n     |   ^\n  15 | };\n  16 | \n  17 | export const useOvermind = createHook<typeof config>();",[],[],["172"],["173"],[],[],[],[],"no-console","Unexpected console statement.","MemberExpression","unexpected","arrow-body-style","Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","ArrowFunctionExpression","unexpectedSingleBlock",{"range":"174","text":"175"},{"range":"176","text":"177"},[],[],["172"],["173"],[],[],[],[],"padding-line-between-statements","func-call-spacing",[1664,1779],"state.groups ? Object.values(state.groups).filter((item: any) => item.thema === state.theme) : []",[4349,4435],"nn.length >= width ? nn : new Array(width - nn.length + 1).join(zn) + nn"]